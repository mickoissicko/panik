#include "../include/lib/gethome.h"
#include "../include/common.h"

#include <unistd.h>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <cstdio>
#include <string>

#ifdef _WIN32
    #include <Windows.h>

    void nt_InitialConfiguration() 
    {
        char* Path = gethome();

        if (
            chdir(Path) != 0 ||
            chdir(MIX)  != 0 ||
            chdir(PNK)  != 0
        ){
            printf("error\n");
            exit(1);
        }

        char Key;
        std::string App;
        std::string ExecutableExtension = ".exe";

        std::cout << "Enter application name without '.exe' extension: ";
        std::cin >> App;

        App.append(ExecutableExtension);
        
        std::cout << "Key (in capital letters): ";
        std::cin >> Key;

        std::ofstream ConfFile("options.cfg");
        
        ConfFile << App << std::endl
                << Key << std::endl
                << "# Generated by Panik";
                
        ConfFile.close();

        std::cout << "Waiting for key-press..." << std::endl;

        while (true) 
        {
            if (GetAsyncKeyState(Key) & MOST_SIGNIFICANT_BIT)
            {
                char command[MAX_COMMAND_LENGTH];

                sprintf(command, "taskkill /f /im %s", App.c_str());
                system(command);

                break;
            }
        }
    }

    void nt_StartProgram()
    {
        char* Path = gethome();

        if (
            chdir(Path) != 0 ||
            chdir(MIX)  != 0 ||
            chdir(PNK)  != 0
        ){
            printf("error\n");
            exit(1);
        }

        std::string word;
        std::ifstream FILE("options.cfg");

        char Key;
        std::string App;

        FILE >> App >> Key;

        FILE.close();

        while (true) 
        {
            if (GetAsyncKeyState(Key) & MOST_SIGNIFICANT_BIT)
            {
                char command[MAX_COMMAND_LENGTH];

                sprintf(command, "taskkill /f /im %s", App.c_str());
                system(command);

            }
        }
    }

    void nt_Menu()
    {
        char* Path = gethome();

        if (
            chdir(Path) != 0 ||
            chdir(MIX)  != 0 ||
            chdir(PNK)  != 0
        ){
            printf("error\n");
            exit(1);
        }

        char input[MAX_INPUT_BUFFER];
        FILE* file;
        const char* Cfg = "options.cfg";

        while (1)
        {
            printf("[1] Arm\n");
            printf("[2] Reconfigure\n");
            printf("[X] Exit\n");
            printf("Enter your choice: ");
            
            if (fgets(input, sizeof(input), stdin) == NULL) 
            {
                printf("Error reading your choice.\n");
                continue;
            }

            input[strcspn(input, "\n")] = 0;

            if (strcmp(input, "1") == 0)
            {
                file = fopen(Cfg, "r");
                
                if (file != NULL)
                {
                    StartProgram();
                    fclose(file);
                    break;
                } 

                else if (file == NULL)
                {
                    InitialConfiguration();
                    break;
                }

            }

            else if (strcmp(input, "2") == 0)
            {
                InitialConfiguration();
                break;
            }

            else if (strcasecmp(input, "X") == 0) 
            {
                printf("Exiting...\n");
                break;
            } 
            
            else 
            {
                printf("Invalid choice!\n\n");
            }
        }
    }
#else
    #include <linux/input.h>
    #include <fcntl.h>

    void posix_InitialConfiguration() 
    {
        char* Path = gethome();

        if (
            chdir(Path) != 0 ||
            chdir(MIX)  != 0 ||
            chdir(PNK)  != 0
        ){
            printf("error\n");
            exit(1);
        }

        int EventNumber;
        int KeyCode;
        std::string App;

        printf("Enter the event number: ");
        scanf("%d", &EventNumber);

        char device_path[MAX_DEVICE_PATH]; 
        snprintf(device_path, sizeof(device_path), "/dev/input/event%d", EventNumber);

        int fd = open(device_path, O_RDONLY);

        if (fd == -1) 
        {
            perror("Error opening input device");
            exit(EXIT_FAILURE);
        }

        struct input_event ev;

        printf("Enter the key code to watch (see list on Panik Github): ");
        scanf("%d", &KeyCode);

        std::cout << "Enter application name with full extension (if any): ";
        std::cin >> App;

        std::ofstream ConfFile("options.cfg");
        
        ConfFile << App << std::endl
                << KeyCode << std::endl
                << EventNumber << std::endl
                << "# Generated by Panik";
                
        ConfFile.close();

        std::cout << "Waiting for key-press..." << std::endl;

        char command[MAX_COMMAND_LENGTH];

        while (1) 
        {
            ssize_t bytesRead = read(fd, &ev, sizeof(ev));

            if (
                bytesRead == sizeof(ev) &&
                ev.type == EV_KEY &&
                ev.code == KeyCode &&
                ev.value == 1
            ){
                sprintf(command, "pkill -f %s", App.c_str());
                system(command);
            }
        }

        close(fd);
    }

    void posix_StartProgram() 
    {
        char* Path = gethome();

        if (
            chdir(Path) != 0 ||
            chdir(MIX)  != 0 ||
            chdir(PNK)  != 0
        ){
            printf("error\n");
            exit(1);
        }

        std::string App;
        int KeyCode;
        int EventNumber;

        std::ifstream FILE("options.cfg");

        if (!FILE.is_open()) 
        {
            std::cerr << "Error opening options.cfg" << std::endl;
        }

        FILE >> App >> KeyCode >> EventNumber;

        FILE.close();

        char device_path[CONFIG_MAX_DEVICE_PATH];
        snprintf(device_path, sizeof(device_path), "/dev/input/event%d", EventNumber);

        int fd = open(device_path, O_RDONLY);

        if (fd == -1) 
        {
            perror("Error opening input device");
        }

        struct input_event ev;
        int targetKeyCode = KeyCode;

        char command[256];

        while (1) 
        {
            ssize_t bytesRead = read(fd, &ev, sizeof(ev));
            
            if (bytesRead == sizeof(ev) && ev.type == EV_KEY && ev.code == targetKeyCode && ev.value == 1) 
            {
                snprintf(command, sizeof(command), "pkill -f %s", App.c_str());
                system(command);
            }
        }

        close(fd);
    }

    void posix_Menu()
    {
        char input[MAX_INPUT_BUFFER];

        char* Path = gethome();

        if (
            chdir(Path) != 0 ||
            chdir(MIX)  != 0 ||
            chdir(PNK)  != 0
        ){
            printf("error\n");
            exit(1);
        }

        FILE *file;
        const char *Cfg = "options.cfg";

        while (1)
        {
            printf("[1] Arm\n");
            printf("[2] Reconfigure\n");
            printf("[X] Exit\n");
            printf("Enter your choice: ");

            if (fgets(input, sizeof(input), stdin) == NULL) 
            {
                printf("Error reading your choice.\n");
                continue;
            }

            input[strcspn(input, "\n")] = 0;

            if (strcmp(input, "1") == 0)
            {
                file = fopen(Cfg, "r");
                
                if (file != NULL)
                {
                    posix_StartProgram();
                    fclose(file);
                    break;
                } 

                else if (file == NULL)
                {
                    posix_InitialConfiguration();
                    break;
                }
            }

            else if (strcmp(input, "2") == 0)
            {
                posix_InitialConfiguration();
                break;
            }

            else if (strcasecmp(input, "X") == 0) 
            {
                printf("Exiting...\n");
                break;
            } 
            
            else 
            {
                printf("Invalid choice!\n\n");
            }
        }
    }
#endif

